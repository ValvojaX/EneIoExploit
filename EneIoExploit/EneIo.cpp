#include "EneIo.h"

EneIo::EneIo()
{
	hDevice = CreateFile(
		TEXT("\\\\.\\EneIo"),
		FILE_ALL_ACCESS,
		FILE_SHARE_READ,
		nullptr,
		FILE_OPEN,
		FILE_ATTRIBUTE_NORMAL,
		nullptr
	);

	if (hDevice == INVALID_HANDLE_VALUE)
	{
		printf("[-] Failed to open device: %d\n", GetLastError());
		system("pause");
		exit(1);
	}
	printf("[+] Device opened successfully\n");
}

EneIo::~EneIo()
{
	if (hDevice) {
		printf("[+] Closing device\n");
		CloseHandle(hDevice);
	}
}

BOOL EneIo::MapViewOfSection(SECTION_MAP_INFO &buffer)
{
	DWORD bytesReturned = 0;
	return DeviceIoControl(hDevice, IOCTL_WINIO_MAPPHYSTOLIN, &buffer, sizeof(buffer), &buffer, sizeof(buffer), &bytesReturned, nullptr);
}

BOOL EneIo::UnmapViewOfSection(SECTION_MAP_INFO &buffer)
{
	DWORD bytesReturned = 0;
	return DeviceIoControl(hDevice, IOCTL_WINIO_UNMAPPHYSADDR, &buffer, sizeof(buffer), &buffer, sizeof(buffer), &bytesReturned, nullptr);
	
}

BOOL EneIo::ReadPort(PORT_INFO &buffer)
{
	DWORD bytesReturned = 0;
	return DeviceIoControl(hDevice, IOCTL_WINIO_READPORT, &buffer, sizeof(buffer), &buffer.value, sizeof(buffer.value), &bytesReturned, nullptr);
}

BOOL EneIo::WritePort(PORT_INFO &buffer)
{
	DWORD bytesReturned = 0;
	return DeviceIoControl(hDevice, IOCTL_WINIO_WRITEPORT, &buffer, sizeof(buffer), &buffer, sizeof(buffer), &bytesReturned, nullptr);
}

BOOL EneIo::ReadMsr(MSR_INFO& buffer)
{
	DWORD bytesReturned = 0;
	return DeviceIoControl(hDevice, IOCTL_WINIO_READMSR, &buffer, sizeof(buffer), &buffer.value, sizeof(buffer.value), &bytesReturned, nullptr);
}


BOOL EneIo::WriteMsr(MSR_INFO& buffer)
{	
	DWORD bytesReturned = 0;
	return DeviceIoControl(hDevice, IOCTL_WINIO_WRITEMSR, &buffer, sizeof(buffer), &buffer, sizeof(buffer), &bytesReturned, nullptr);
}