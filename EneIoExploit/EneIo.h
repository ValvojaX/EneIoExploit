#pragma once
#include <Windows.h>
#include <winternl.h>
#include <cstdio>
#include <cstdint>

typedef uint64_t QWORD;

#define IOCTL_WINIO_MAPPHYSTOLIN	0x80102040
#define IOCTL_WINIO_UNMAPPHYSADDR	0x80102044
#define IOCTL_WINIO_READPORT		0x80102050
#define IOCTL_WINIO_WRITEPORT		0x80102054
#define IOCTL_WINIO_READMSR			0x80102058
#define IOCTL_WINIO_WRITEMSR		0x8010205C


struct SECTION_MAP_INFO {
	_In_ SIZE_T CommitSize;
	_In_ PLARGE_INTEGER SectionOffset;
	_Out_ HANDLE SectionHandle;
	_Out_ PVOID BaseAddress;
	_Out_ PVOID Object;
};


#pragma pack(push, 1)
struct PORT_INFO {
	_In_ WORD port;
	_In_ DWORD data;
	_In_ BYTE length;
	_Out_opt_ BYTE value;
};


#pragma pack(push, 1)
struct MSR_INFO {
	_In_ DWORD index;
	union { // ene.sys uses DWORD (4 bytes) for writing to MSR meaning we can't write QWORD (8 bytes) values
		struct {
			_In_ DWORD reserved;
			_In_ DWORD data;
		};
		_Out_ QWORD value;		
	};
};

class EneIo
{
public:
	EneIo();
	~EneIo();

public:
	BOOL MapViewOfSection(SECTION_MAP_INFO &buffer);
	BOOL UnmapViewOfSection(SECTION_MAP_INFO &buffer);
	BOOL ReadPort(PORT_INFO &buffer);
	BOOL WritePort(PORT_INFO &buffer);
	BOOL ReadMsr(MSR_INFO& buffer);
	BOOL WriteMsr(MSR_INFO& buffer);

private:
	HANDLE hDevice;
};